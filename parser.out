Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> VAR
Rule 2     expr -> func arg
Rule 3     expr -> LAMBDA VAR DOT expr
Rule 4     func -> VAR
Rule 5     func -> LPAREN LAMBDA VAR DOT expr RPAREN
Rule 6     func -> func arg
Rule 7     func -> VAR DOT expr
Rule 8     arg -> VAR
Rule 9     arg -> LPAREN LAMBDA VAR DOT expr RPAREN
Rule 10    arg -> LPAREN func arg RPAREN

Terminals, with rules where they appear

DOT                  : 3 5 7 9
LAMBDA               : 3 5 9
LPAREN               : 5 9 10
RPAREN               : 5 9 10
VAR                  : 1 3 4 5 7 8 9
error                : 

Nonterminals, with rules where they appear

arg                  : 2 6 10
expr                 : 3 5 7 9 0
func                 : 2 6 10

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . LAMBDA VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    VAR             shift and go to state 2
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 1
    func                           shift and go to state 3

state 1

    (0) S' -> expr .



state 2

    (1) expr -> VAR .
    (4) func -> VAR .
    (7) func -> VAR . DOT expr

  ! reduce/reduce conflict for VAR resolved using rule 1 (expr -> VAR .)
  ! reduce/reduce conflict for LPAREN resolved using rule 1 (expr -> VAR .)
    $end            reduce using rule 1 (expr -> VAR .)
    VAR             reduce using rule 1 (expr -> VAR .)
    LPAREN          reduce using rule 1 (expr -> VAR .)
    RPAREN          reduce using rule 1 (expr -> VAR .)
    DOT             shift and go to state 6

  ! VAR             [ reduce using rule 4 (func -> VAR .) ]
  ! LPAREN          [ reduce using rule 4 (func -> VAR .) ]


state 3

    (2) expr -> func . arg
    (6) func -> func . arg
    (8) arg -> . VAR
    (9) arg -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (10) arg -> . LPAREN func arg RPAREN

    VAR             shift and go to state 8
    LPAREN          shift and go to state 9

    arg                            shift and go to state 7

state 4

    (3) expr -> LAMBDA . VAR DOT expr

    VAR             shift and go to state 10


state 5

    (5) func -> LPAREN . LAMBDA VAR DOT expr RPAREN

    LAMBDA          shift and go to state 11


state 6

    (7) func -> VAR DOT . expr
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . LAMBDA VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    VAR             shift and go to state 2
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 12
    func                           shift and go to state 3

state 7

    (2) expr -> func arg .
    (6) func -> func arg .

  ! reduce/reduce conflict for VAR resolved using rule 2 (expr -> func arg .)
  ! reduce/reduce conflict for LPAREN resolved using rule 2 (expr -> func arg .)
    $end            reduce using rule 2 (expr -> func arg .)
    VAR             reduce using rule 2 (expr -> func arg .)
    LPAREN          reduce using rule 2 (expr -> func arg .)
    RPAREN          reduce using rule 2 (expr -> func arg .)

  ! VAR             [ reduce using rule 6 (func -> func arg .) ]
  ! LPAREN          [ reduce using rule 6 (func -> func arg .) ]


state 8

    (8) arg -> VAR .

    $end            reduce using rule 8 (arg -> VAR .)
    VAR             reduce using rule 8 (arg -> VAR .)
    LPAREN          reduce using rule 8 (arg -> VAR .)
    RPAREN          reduce using rule 8 (arg -> VAR .)


state 9

    (9) arg -> LPAREN . LAMBDA VAR DOT expr RPAREN
    (10) arg -> LPAREN . func arg RPAREN
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    LAMBDA          shift and go to state 13
    VAR             shift and go to state 14
    LPAREN          shift and go to state 5

    func                           shift and go to state 15

state 10

    (3) expr -> LAMBDA VAR . DOT expr

    DOT             shift and go to state 16


state 11

    (5) func -> LPAREN LAMBDA . VAR DOT expr RPAREN

    VAR             shift and go to state 17


state 12

    (7) func -> VAR DOT expr .

    VAR             reduce using rule 7 (func -> VAR DOT expr .)
    LPAREN          reduce using rule 7 (func -> VAR DOT expr .)


state 13

    (9) arg -> LPAREN LAMBDA . VAR DOT expr RPAREN

    VAR             shift and go to state 18


state 14

    (4) func -> VAR .
    (7) func -> VAR . DOT expr

    VAR             reduce using rule 4 (func -> VAR .)
    LPAREN          reduce using rule 4 (func -> VAR .)
    DOT             shift and go to state 6


state 15

    (10) arg -> LPAREN func . arg RPAREN
    (6) func -> func . arg
    (8) arg -> . VAR
    (9) arg -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (10) arg -> . LPAREN func arg RPAREN

    VAR             shift and go to state 8
    LPAREN          shift and go to state 9

    arg                            shift and go to state 19

state 16

    (3) expr -> LAMBDA VAR DOT . expr
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . LAMBDA VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    VAR             shift and go to state 2
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 20
    func                           shift and go to state 3

state 17

    (5) func -> LPAREN LAMBDA VAR . DOT expr RPAREN

    DOT             shift and go to state 21


state 18

    (9) arg -> LPAREN LAMBDA VAR . DOT expr RPAREN

    DOT             shift and go to state 22


state 19

    (10) arg -> LPAREN func arg . RPAREN
    (6) func -> func arg .

    RPAREN          shift and go to state 23
    VAR             reduce using rule 6 (func -> func arg .)
    LPAREN          reduce using rule 6 (func -> func arg .)


state 20

    (3) expr -> LAMBDA VAR DOT expr .

    $end            reduce using rule 3 (expr -> LAMBDA VAR DOT expr .)
    VAR             reduce using rule 3 (expr -> LAMBDA VAR DOT expr .)
    LPAREN          reduce using rule 3 (expr -> LAMBDA VAR DOT expr .)
    RPAREN          reduce using rule 3 (expr -> LAMBDA VAR DOT expr .)


state 21

    (5) func -> LPAREN LAMBDA VAR DOT . expr RPAREN
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . LAMBDA VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    VAR             shift and go to state 2
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 24
    func                           shift and go to state 3

state 22

    (9) arg -> LPAREN LAMBDA VAR DOT . expr RPAREN
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . LAMBDA VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN LAMBDA VAR DOT expr RPAREN
    (6) func -> . func arg
    (7) func -> . VAR DOT expr

    VAR             shift and go to state 2
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 25
    func                           shift and go to state 3

state 23

    (10) arg -> LPAREN func arg RPAREN .

    $end            reduce using rule 10 (arg -> LPAREN func arg RPAREN .)
    VAR             reduce using rule 10 (arg -> LPAREN func arg RPAREN .)
    LPAREN          reduce using rule 10 (arg -> LPAREN func arg RPAREN .)
    RPAREN          reduce using rule 10 (arg -> LPAREN func arg RPAREN .)


state 24

    (5) func -> LPAREN LAMBDA VAR DOT expr . RPAREN

    RPAREN          shift and go to state 26


state 25

    (9) arg -> LPAREN LAMBDA VAR DOT expr . RPAREN

    RPAREN          shift and go to state 27


state 26

    (5) func -> LPAREN LAMBDA VAR DOT expr RPAREN .

    VAR             reduce using rule 5 (func -> LPAREN LAMBDA VAR DOT expr RPAREN .)
    LPAREN          reduce using rule 5 (func -> LPAREN LAMBDA VAR DOT expr RPAREN .)


state 27

    (9) arg -> LPAREN LAMBDA VAR DOT expr RPAREN .

    $end            reduce using rule 9 (arg -> LPAREN LAMBDA VAR DOT expr RPAREN .)
    VAR             reduce using rule 9 (arg -> LPAREN LAMBDA VAR DOT expr RPAREN .)
    LPAREN          reduce using rule 9 (arg -> LPAREN LAMBDA VAR DOT expr RPAREN .)
    RPAREN          reduce using rule 9 (arg -> LPAREN LAMBDA VAR DOT expr RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (expr -> VAR)
WARNING: rejected rule (func -> VAR) in state 2
WARNING: reduce/reduce conflict in state 7 resolved using rule (expr -> func arg)
WARNING: rejected rule (func -> func arg) in state 7
