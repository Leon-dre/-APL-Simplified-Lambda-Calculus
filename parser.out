Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> VAR
Rule 2     expr -> NUMBER
Rule 3     expr -> expr expr
Rule 4     expr -> LAMBDA VAR DOT expr
Rule 5     expr -> LPAREN expr RPAREN
Rule 6     expr -> DOT NUMBER

Terminals, with rules where they appear

DOT                  : 4 6
LAMBDA               : 4
LPAREN               : 5
NUMBER               : 2 6
RPAREN               : 5
VAR                  : 1 4
error                : 

Nonterminals, with rules where they appear

expr                 : 3 3 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (3) expr -> expr . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

    expr                           shift and go to state 7

state 2

    (1) expr -> VAR .

    VAR             reduce using rule 1 (expr -> VAR .)
    NUMBER          reduce using rule 1 (expr -> VAR .)
    LAMBDA          reduce using rule 1 (expr -> VAR .)
    LPAREN          reduce using rule 1 (expr -> VAR .)
    DOT             reduce using rule 1 (expr -> VAR .)
    $end            reduce using rule 1 (expr -> VAR .)
    RPAREN          reduce using rule 1 (expr -> VAR .)


state 3

    (2) expr -> NUMBER .

    VAR             reduce using rule 2 (expr -> NUMBER .)
    NUMBER          reduce using rule 2 (expr -> NUMBER .)
    LAMBDA          reduce using rule 2 (expr -> NUMBER .)
    LPAREN          reduce using rule 2 (expr -> NUMBER .)
    DOT             reduce using rule 2 (expr -> NUMBER .)
    $end            reduce using rule 2 (expr -> NUMBER .)
    RPAREN          reduce using rule 2 (expr -> NUMBER .)


state 4

    (4) expr -> LAMBDA . VAR DOT expr

    VAR             shift and go to state 8


state 5

    (6) expr -> DOT . NUMBER

    NUMBER          shift and go to state 9


state 6

    (5) expr -> LPAREN . expr RPAREN
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

    expr                           shift and go to state 10

state 7

    (3) expr -> expr expr .
    (3) expr -> expr . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    $end            reduce using rule 3 (expr -> expr expr .)
    RPAREN          reduce using rule 3 (expr -> expr expr .)
    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

  ! VAR             [ reduce using rule 3 (expr -> expr expr .) ]
  ! NUMBER          [ reduce using rule 3 (expr -> expr expr .) ]
  ! LAMBDA          [ reduce using rule 3 (expr -> expr expr .) ]
  ! LPAREN          [ reduce using rule 3 (expr -> expr expr .) ]
  ! DOT             [ reduce using rule 3 (expr -> expr expr .) ]

    expr                           shift and go to state 7

state 8

    (4) expr -> LAMBDA VAR . DOT expr

    DOT             shift and go to state 11


state 9

    (6) expr -> DOT NUMBER .

    VAR             reduce using rule 6 (expr -> DOT NUMBER .)
    NUMBER          reduce using rule 6 (expr -> DOT NUMBER .)
    LAMBDA          reduce using rule 6 (expr -> DOT NUMBER .)
    LPAREN          reduce using rule 6 (expr -> DOT NUMBER .)
    DOT             reduce using rule 6 (expr -> DOT NUMBER .)
    $end            reduce using rule 6 (expr -> DOT NUMBER .)
    RPAREN          reduce using rule 6 (expr -> DOT NUMBER .)


state 10

    (5) expr -> LPAREN expr . RPAREN
    (3) expr -> expr . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    RPAREN          shift and go to state 12
    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

    expr                           shift and go to state 7

state 11

    (4) expr -> LAMBDA VAR DOT . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4
    LPAREN          shift and go to state 6
    DOT             shift and go to state 5

    expr                           shift and go to state 13

state 12

    (5) expr -> LPAREN expr RPAREN .

    VAR             reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    LAMBDA          reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 5 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 5 (expr -> LPAREN expr RPAREN .)


state 13

    (4) expr -> LAMBDA VAR DOT expr .
    (3) expr -> expr . expr
    (1) expr -> . VAR
    (2) expr -> . NUMBER
    (3) expr -> . expr expr
    (4) expr -> . LAMBDA VAR DOT expr
    (5) expr -> . LPAREN expr RPAREN
    (6) expr -> . DOT NUMBER

    LPAREN          reduce using rule 4 (expr -> LAMBDA VAR DOT expr .)
    DOT             reduce using rule 4 (expr -> LAMBDA VAR DOT expr .)
    $end            reduce using rule 4 (expr -> LAMBDA VAR DOT expr .)
    RPAREN          reduce using rule 4 (expr -> LAMBDA VAR DOT expr .)
    VAR             shift and go to state 2
    NUMBER          shift and go to state 3
    LAMBDA          shift and go to state 4

  ! VAR             [ reduce using rule 4 (expr -> LAMBDA VAR DOT expr .) ]
  ! NUMBER          [ reduce using rule 4 (expr -> LAMBDA VAR DOT expr .) ]
  ! LAMBDA          [ reduce using rule 4 (expr -> LAMBDA VAR DOT expr .) ]
  ! LPAREN          [ shift and go to state 6 ]
  ! DOT             [ shift and go to state 5 ]

    expr                           shift and go to state 7
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 7 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 7 resolved as shift
WARNING: shift/reduce conflict for DOT in state 7 resolved as shift
